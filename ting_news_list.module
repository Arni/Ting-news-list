<?php

/**
 * Implementation of hook_theme().
 */
function ting_news_list_theme() {
    return array(
        'ting_news_list_panel_list' => array(
            'arguments' => array('objects' => NULL),
            'template' => 'ting_news_list_panel_list',
        ),
        'ting_news_list_panel_list_entry' => array(
            'arguments' => array('object' => NULL),
            'template' => 'ting_news_list_panel_list_entry',
        ),
        'ting_news_list_search' => array(
            'arguments' => array('element' => NULL),
        ),
        'ting_news_list_admin_form' => array(
            'arguments' => array('form' => NULL),
        ),
        'ting_news_list_tabs' => array(
            'arguments' => array('searches' => NULL),
            'template' => 'ting_news_list_tabs',
        ),
    );
}

/**
 * Implementation of hook_menu().
 */
function ting_news_list_menu() {
    $items = array();

    $items['ting/news_list/ahah'] = array(
        'title' => 'Show news list results',
        'page callback' => 'ting_news_list_result_ahah',
        'access arguments' => array('view news list panel'),
        'file' => 'ting_news_list_pages.inc',
        'type' => MENU_CALLBACK,
    );

    $items['admin/settings/ting_news_list'] = array(
        'title' => 'Ting news list',
        'page callback' => 'ting_news_list_admin_page',
        'access arguments' => array('administer ting news list'),
        'file' => 'ting_news_list.admin.inc',
        'file path' => $path,
    );

    $items['admin/settings/ting_news_list/form/ahah'] = array(
        'title' => 'Edit search carousels',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ting_news_list_form_ahah'),
        'access arguments' => array('administer news list'),
        'file' => 'ting_news_list.admin.inc',
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function ting_news_list_ctools_plugin_directory($module, $plugin) {
    if ($module == 'ctools' || $module == 'panels') {
        return 'plugins/' . $plugin;
    }
}

/**
 * Implementation of hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function ting_news_list_perm() {
    return array(
        'view news list panel',
        'administer ting news list',
    );
}

/**
 * Theme function to format the our custom form element.
 *
 * We use the container-inline class so that all three of the HTML elements
 * are placed next to each other, rather than on separate lines.
 */
function theme_ting_news_list_search($element) {
    return theme('form_element', $element, '<div class="ting-news-list-search-wrap">' . $element['#children'] . '</div>');
}

/**
 * Implementation of hook_elements().
 */
function ting_news_list_elements() {
    $types = array();
    $types['ting_news_list_search'] = array(
        '#input' => TRUE,
        '#process' => array('ting_news_list_search_element_process'),
        '#element_validate' => array('ting_news_list_search_element_validate'),
        '#default_value' => array(
            'sort' => 0,
            'title' => '',
            'subtitle' => '',
            'query' => '',
        ),
    );
    return $types;
}

/**
 * Process callback to expand our form element into several fields.
 */
function ting_news_list_search_element_process($element, $form_state) {
    $element['#tree'] = TRUE;

    if (!isset($element['#value'])) {
        $element['#value'] = $element['#default_value'];
    } else {
        $element['#value'] += $element['#default_value'];
    }

    $element['sort'] = array(
        '#type' => 'weight',
        '#delta' => 10,
        '#default_value' => (isset($element['#sort'])) ? $element['#sort'] : $element['#value']['sort'],
        '#attributes' => array('class' => 'sort-hidden'),
    );

    $element['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#description' => t('The title of the search is used for the tab in the carousel. Keep it short.'),
        '#default_value' => $element['#value']['title'],
    );

    $element['subtitle'] = array(
        '#type' => 'textfield',
        '#title' => t('subtitle'),
        '#description' => t('The subtitle displayed next to the search results'),
        '#default_value' => $element['#value']['subtitle'],
    );
    $element['query'] = array(
        '#type' => 'textfield',
        '#title' => t('Query'),
        '#maxlength' => 2048,
        '#description' => t('The query to display search results for'),
        '#default_value' => $element['#value']['query'],
    );
    $element['remove'] = array(
        '#type' => 'button',
        '#submit' => FALSE,
        '#value' => t('Remove'),
        '#attributes' => array('class' => 'remove')
    );

    return $element;
}

/**
 * Our element's validation function.
 */
function ting_news_list_search_element_validate($element, &$form_state) {
    return $form;
}

///**
// * Template preprocessor for Ting collections in search results.
// */
//function template_preprocess_ting_news_list_collection(&$variables) {
//    // Mapping type names to local ids.
//    $type_map = array();
//
//    if (!isset($type_map[$variables->type])) {
//        $type_map[$variables->type] = array();
//    }
//    $type_map[$variables->type][] = $variables;
//
//    $links = array();
//    foreach ($type_map as $type => $objects) {
//        $classes = '';
//
//        foreach ($objects as $object) {
//            // TODO: Really, this should go into ting_availability.
//            if (ting_object_is($object, 'limited_availability')) {
//                $classes .= ' ting-object-' . $object->localId;
//            } else {
//                // We have at least one object that's always available, show
//                // that and break out.
//                $classes = 'available';
//                break;
//            }
//        }
//
//        $links[] = array(
//            'data' => $type,
//            'class' => trim($classes),
//        );
//    }
//
//    $variables['type_list'] = theme('item_list', $links, NULL, 'ul', array('class' => 'ting-search-collection-types'));
//
//
//    // Get the picture if we have a valid object.
//    if ($variables['collection']->objects[0] instanceOf TingClientObject) {
//        $image_url = ting_covers_collection_url($variables, '80_x');
//        if ($image_url) {
//            $variables['picture'] = l(theme('image', $image_url, '', '', null, false), $variables['collection']->url, array('html' => true));
//        }
//    }
//}

?>
